<?xml version="1.0"?>
<project name="TechDivision_MagentoUnitTesting" basedir=".">

    <!-- makes environment variables available -->
    <property environment="env" />

    <!-- declare user and project specific properties -->
    <property file="${user.home}/build.properties"/>
    <property file="build.properties"/>
    <property file="build.default.properties"/>

    <!-- declare the directory with the build- and deployment stub -->
    <property name="build.dir" value="${basedir}/build"/>

    <!-- declare project specific variables -->
    <property name="namespace" value="TechDivision"/>
    <property name="module" value="MagentoUnitTesting"/>
    <property name="codepool" value="community"/>
    <property name="module.activated" value="true"/>
    <property name="unique.name" value="${namespace}/${module}" />

    <!-- ===================================================================== -->
    <!-- Import the general build configuration file                           -->
    <!-- ===================================================================== -->
    <import file="${build.dir}/general.xml" optional="true"/>

    <!-- ===================================================================== -->
    <!-- Checks if the build- and deployment stub has already been initialized -->
    <!-- ===================================================================== -->
    <target name="build-and-deployment">
        <condition property="build-env.available">
            <available file="${build.dir}" type="dir"/>
        </condition>
        <antcall target="build-and-deployment-init"/>
        <antcall target="build-and-deployment-update"/>
    </target>

    <!-- ===================================================================== -->
    <!-- Clones the build- and deployment stub from Gerrit                     -->
    <!-- ===================================================================== -->
    <target  name="build-and-deployment-init" unless="build-env.available" description="Clones the the build- and deployment stub from Gerrit">
        <!-- log a message about cloning the build- and deployment stub from Gerrit -->
        <echo message="Clone project Magento_Build (build- and deployment stub) from Gerrit..."/>
        <!-- clone the stub from the Gerrit/GIT repository -->
        <exec executable="${bin.git}" outputproperty="git.clone.output">
            <arg value="clone" />
            <arg value="${git.clone.arg}" />
            <arg value="${build.dir}" />
        </exec>
        <!-- log the clone message -->
        <echo>${git.clone.output}</echo>
    </target>

    <!-- ===================================================================== -->
    <!-- Updates the build- and deployment stub from Gerrit                    -->
    <!-- ===================================================================== -->
    <target name="build-and-deployment-update" if="build-env.available" description="Updates the the build- and deployment stub from Gerrit">
        <!-- log a message about updating the build- and deployment stub from Gerrit -->
        <echo message="Update project Magento_Build (build- and deployment stub) from Gerrit..."/>
        <!-- pull the stub updates from the Gerrit/GIT repository -->
        <exec dir="${build.dir}" executable="${bin.git}" outputproperty="git.pull.output">
            <arg value="pull" />
        </exec>
        <!-- log the pull message -->
        <echo>${git.pull.output}</echo>
    </target>

    <!-- ==================================================================== -->
    <!-- Get original Magento Source Package by given version number		  -->
    <!-- ==================================================================== -->
    <target name="get-original-magento-src">
        <echo message="Downloading original source for magento ${magento.edition} v${magento.version}..."/>
        <mkdir dir="${php-target.dir}/tmp" />
        <get src="${instance.original.download.url}/${instance.download.file}" dest="${php-target.dir}/tmp/${instance.download.file}"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Extracts the Magento sources to the target directory			      -->
    <!-- ==================================================================== -->
    <target name="init" description="Extracts the Magento sources to the magento-src directory.">
        <antcall target="prepare"/>
        <antcall target="get-original-magento-src"/>
        <exec dir="${php-target.dir}" executable="${bin.extract}">
            <arg line="${bin.extract.args}"/>
            <arg line="${php-target.dir}/tmp/${instance.download.file}"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a tar.gz with the magento sources extended with magento 2    -->
    <!-- unit testing framework                                               -->
    <!-- ==================================================================== -->
    <target name="CREATE-magento-src-package" description="Creates a tar.gz with the magento sources extended with magento 2 unit testing framework">
        <!-- clean the target directory -->
        <antcall target="clean"/>
        <!-- extract the magento sources to the target directory -->
        <antcall target="init"/>
        <!-- copy the unit tests to the target directory -->
        <copy todir="${php-target.dir}/${unique.name}">
            <fileset dir="${php-src.dir}">
                <include name="**/*.xml" />
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <copy todir="${php-target.dir}/${unique.name}">
            <fileset dir="${php-src.dir}">
                <include name="**/*" />
                <exclude name="**/*.xml" />
            </fileset>
        </copy>
		<!-- clone the stub from the Gerrit/GIT repository -->
		<exec executable="${bin.git}" outputproperty="git.clone.output">
			<arg value="clone" />
			<arg value="${git.clone.repository}/magento/TechDivision_Connect" />
			<arg value="${php-target.dir}/TechDivision_Connect" />
		</exec>
    	<!-- copy connect files to Magento sources -->
    	<move todir="${php-target.dir}/magento">
			<fileset dir="${php-target.dir}/TechDivision_Connect/src">
				<include name="**/*"/>
				<exclude name="package.xml"/>
			</fileset>
    	</move>
        <!-- copy the unit tests/sources to the magento sources -->
        <copy todir="${php-target.dir}/magento">
            <fileset dir="${php-target.dir}/${unique.name}">
                <include name="*/**"/>
            </fileset>
        </copy>
        <!-- create the tar.gz of the patched magento sources -->
        <tar basedir="${php-target.dir}" longfile="gnu" destfile="${php-target.dir}/${instance.download.file}" compression="gzip">
            <include name="magento/**"/>
        </tar>
    </target>

</project>